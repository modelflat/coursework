#ifndef __ROTATIONS_CLH
#define __ROTATIONS_CLH

// TODO this should be dynamic
#ifndef ROTATION_MAX_ITER
#define ROTATION_MAX_ITER 64
#endif

#define ROTATION_PT_LESS(a, b) (length(a) < length(b))
#define ROTATION_PT_GREATER(a, b) (length(a) > length(b))
#define ROTATION_PT_NOT_EQUAL(a, b) (ROTATION_PT_LESS(a, b) || ROTATION_PT_GREATER(a, b))

// Find minimal rotation of a sequence of complex numbers
// https://en.wikipedia.org/wiki/Lexicographically_minimal_string_rotation#Booth's_Algorithm
int find_minimal_rotation(int, size_t, const global real*, real);
int find_minimal_rotation(int n_points, size_t shift, const global real* points, real tol) {
    char failure[ROTATION_MAX_ITER];
    for (int i = 0; i < n_points; ++i) {
        failure[i] = -1;
    }

    int k = 0;

    for (int j = 1; j < n_points; ++j) {
        const real2 sj = vload2(shift + j, points);
        int i = failure[j - k - 1];
        real2 sj_next = vload2(shift + ((k + i + 1) % n_points), points);
        while (i != -1 && ROTATION_PT_NOT_EQUAL(sj, sj_next)) {
            if (ROTATION_PT_LESS(sj, sj_next)) {
                k = j - i - 1;
            }
            i = failure[i];
            sj_next = vload2(shift + ((k + i + 1) % n_points), points);
        }
        if (ROTATION_PT_NOT_EQUAL(sj, sj_next)) {
            const real2 sk = vload2(shift + (k % n_points), points);
            if (ROTATION_PT_LESS(sj, sk)) {
                k = j;
            }
            failure[j - k] = -1;
        } else {
            failure[j - k] = i + 1;
        }
    }

    return k;
}

// Rotate sequence of complex numbers
void rotate_sequence(int, size_t, global real*, int);
void rotate_sequence(int n_points, size_t shift, global real* points, int k) {
    for (int c = 0, v = 0; c < n_points; ++v) {
        ++c;
        int target = v;
        int target_next = v + k;
        real2 tmp = vload2(shift + v, points);
        while (target_next != v) {
            ++c;
            vstore2(
                vload2(shift + target_next, points), shift + target, points
            );
            target = target_next;
            target_next = (target_next + k) % n_points;
        }
        vstore2(tmp, shift + target, points);
    }
}

#endif