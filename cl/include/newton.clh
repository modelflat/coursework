#ifndef __NEWTON_CLH
#define __NEWTON_CLH

#include "random.clh"
#include "complex.clh"


#define RANDOM_ROOT(rng_state) ((as_uint(random(rng_state)) >> 3) % 3)


typedef struct {
    real2 z, c;
    real h, alpha, eps;
    uint2 rng_state;
    int seq_pos, seq_size;
    const global int* seq;
    real2 roots[3];
} newton_state;


inline void ns_init(
    newton_state* s,
    real2 z0, real2 c, real h, real alpha, ulong seed, int seq_size, const global int* seq
) {
    s->z = z0;
    s->c = c;
    s->h = h;
    s->alpha = alpha;
    s->eps = -h * (1 - alpha) / 3;
    //            -h / 6
    init_state(seed, &s->rng_state);
    s->seq_pos = 0;
    s->seq_size = seq_size;
    s->seq = seq;
}


inline int ns_next_index(newton_state* s) {
    if (s->seq_size > 0) {
        s->seq_pos %= s->seq_size;
        return s->seq[s->seq_pos++];
    }
    return RANDOM_ROOT(&s->rng_state);
}


inline void ns_next(newton_state* s) {
    const real2 a = -(
        s->z + s->alpha * s->h / 3 * (
            s->z + cdiv(s->c, csq(s->z))
        )
    ) / (1 + s->eps);
    // -(z + a*h/3 * (z + cd))
    // / (1 - h/6)
    const real2 c = s->c * s->eps / (1 + s->eps);
    //               c * h / (h - 6)

    int errcode = solve_cubic(a, (real2)(0, 0), c, s->roots);

    s->z = s->roots[errcode == 2 ? 0 : ns_next_index(s)];
}


#endif // __NEWTON_CLH