#ifndef __UTIL_CLH
#define __UTIL_CLH

#define USE_OLD_COLORS

#define COORD_2D_INV_Y (int2)(get_global_id(0), get_global_size(1) - get_global_id(1) - 1)

inline float4 hsv2rgb(float3 hsv) {
    const float c = hsv.y * hsv.z;
    const float x = c * (1 - fabs(fmod( hsv.x / 60, 2 ) - 1));
    float3 rgb;
    if      (0 <= hsv.x && hsv.x < 60) {
        rgb = (float3)(c, x, 0);
    } else if (60 <= hsv.x && hsv.x < 120) {
        rgb = (float3)(x, c, 0);
    } else if (120 <= hsv.x && hsv.x < 180) {
        rgb = (float3)(0, c, x);
    } else if (180 <= hsv.x && hsv.x < 240) {
        rgb = (float3)(0, x, c);
    } else if (240 <= hsv.x && hsv.x < 300) {
        rgb = (float3)(x, 0, c);
    } else {
        rgb = (float3)(c, 0, x);
    }
    return (float4)(rgb + (hsv.z - c), 1.0);
}

inline real2 point_from_id(const real4 bounds) {
    const real2 uv = {
        (real)(get_global_id(0) + 0.5) / (real)get_global_size(0),
        (real)(get_global_id(1) + 0.5) / (real)get_global_size(1)
    };
    return bounds.s02 + uv * (bounds.s13 - bounds.s02);
}

inline real2 point_from_id_dense(const real4 bounds) {
    const real2 uv = {
        (real)(get_global_id(0) + 1) / (real)(get_global_size(0)),
        (real)(get_global_id(1) + 1) / (real)(get_global_size(1))
    };
    return bounds.s02 + uv * (bounds.s13 - bounds.s02);
}

int binary_search(int, const global uint*, uint);
int binary_search(int size, const global uint* arr, uint value) {
    int l = 0, r = size;

    while (l < r) {
        const int mid = (r + l) / 2;
        const uint mid_value = arr[mid];

        if (mid_value == value) {
            return mid;
        }
        if (r == l + 1) {
            return -1;
        }
        if (mid_value < value) {
            l = mid;
        } else {
            r = mid;
        }
    }

    return (r + l) / 2;
}

inline real2 round_point(real2 point, int to_sign) {
    return convert_real2(convert_long2_rtz(point * pow(10.0f, (float)to_sign))) / pow(10.0f, (float)(to_sign));
}

inline real2 round_point_tol(real2 point, real tol) {
    return convert_real2(convert_long2_rtz(point / tol)) * tol;
}

inline float3 hsv_for_count(int period, int n_iter) {
    if (period <= 0 || period >= n_iter) {
        return (float3)(0.0, 0.0, 0.0);
    }

    enum { CYCLE_SIZE = 8 };

    float s = 1.0;
    float v = clamp(1.0 - 0.2 * (period / CYCLE_SIZE), 0.0, 1.0);

    switch ((period % CYCLE_SIZE) + 1) {
        case 1:
            return (float3)(  0, s, v);
        case 2:
            return (float3)( 40, s, v);
        case 3:
            return (float3)( 80, s, v);
        case 4:
            return (float3)(120, s, v);
        case 5:
            return (float3)(160, s, v);
        case 6:
            return (float3)(200, s, v);
        case 7:
            return (float3)(240, s, v);
        case 8:
            return (float3)(280, s, v);
        default:
            // not happening
            return (float3)(  0, 0.25, 0.25);
    }
}

inline float3 color_for_count(int count, int total) {
    return hsv2rgb(hsv_for_count(count, total)).xyz;
}

inline float3 color_for_count_old(int count, int total) {
    if (count == total) {
        return 0.0;
    }
    const float d = clamp(1.0 / count * 8, 0.0, 1.0);

    switch(count % 8) {
        case 1:
            return (float3)(1.0, 0.0, 0.0)*d;
        case 2:
            return (float3)(0.0, 1.0, 0.0)*d;
        case 3:
            return (float3)(0.0, 0.0, 1.0)*d;
        case 4:
            return (float3)(1.0, 0.0, 1.0)*d;
        case 5:
            return (float3)(1.0, 1.0, 0.0)*d;
        case 6:
            return (float3)(0.0, 1.0, 1.0)*d;
        case 7:
            return (float3)(0.5, 0.0, 0.0)*d;
        default:
            return count == 8 ? .5 : d;
    }
}

#ifdef USE_OLD_COLORS
#define color_for_period(p, i) ((float4)(color_for_count_old((p), (i)), 1.0))
#else
#define color_for_period(p, i) (hsv2rgb(hsv_for_count((p), (i))))
#endif

#endif // __UTIL_CLH